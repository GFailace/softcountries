{"version":3,"sources":["services/GraphQL/Queries.js","Context/CountriesData.js","views/Components/Card/index.jsx","views/Components/Search/index.jsx","views/Countries/index.jsx","Context/CountryData.js","views/Components/Card/Details/index.jsx","views/Countries/Details/index.jsx","router/routes.js","App.js","index.js"],"names":["COUNTRIES","gql","COUNTRY_DETAILS","CountriesContext","createContext","CountriesProvider","children","useState","countriesData","setCountriesData","Provider","value","CardCountry","capital","flag","name","title","style","textAlign","role","fontSize","SearchInput","searchTerm","input","setSearchTerm","onChange","type","placeholder","e","target","Countries","context","useContext","useCountriesData","filteredCountriesData","setFilteredCountriesData","data","useQuery","useEffect","arrayData","Country","handleSearch","a","filter","country","toLowerCase","includes","span","margin","gutter","padding","map","xs","sm","lg","href","_id","emoji","CountryContext","CountryProvider","countryData","setCountryData","CardDetails","area","domain","population","CountryDetails","useCountryData","formData","setFormData","visible","setVisible","param","window","location","pathname","split","slice","variables","country_id","toString","layout","labelCol","wrapperCol","topLevelDomains","onClick","centered","onOk","onCancel","footer","onFinish","values","formInputData","Item","label","rules","required","addonAfter","offset","htmlType","marginLeft","Routers","path","element","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c16a52d.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const COUNTRIES = gql`\n  query GetCountriesData {\n    Country {\n      _id\n      name\n      population\n      capital\n      area\n      flag {\n        emoji\n      }\n      topLevelDomains {\n        name\n      }\n    }\n  }\n`;\n\nexport const COUNTRY_DETAILS = gql`\n  query GetCountryData($country_id: String!) {\n    Country(_id: $country_id) {\n      _id\n      area\n      population\n      capital\n      topLevelDomains {\n        name\n      }\n      distanceToOtherCountries {\n        countryName\n        distanceInKm\n      }\n      name\n      flag {\n        emoji\n      }\n    }\n  }\n`;\n","import React, { createContext, useContext, useState } from \"react\";\n\nexport const CountriesContext = createContext();\n\nexport default function CountriesProvider({ children }) {\n  const [countriesData, setCountriesData] = useState([]);\n\n  return (\n    <CountriesContext.Provider value={{ countriesData, setCountriesData }}>\n      {children}\n    </CountriesContext.Provider>\n  );\n}\n\nexport function useCountriesData() {\n  const context = useContext(CountriesContext);\n  const { countriesData, setCountriesData } = context;\n  return { countriesData, setCountriesData };\n}\n","import { Card } from 'antd'\n\nexport const CardCountry = ({capital, flag, name}) => {\n\n    return (\n        <>\n        <Card title={name} style={{textAlign: 'center'}}>\n            <span role='img' aria-label={name} style={{fontSize: '5rem'}}>{flag}</span>\n            <p>Capital - {capital}</p>\n        </Card>\n\n        </>\n    )\n}","import { Input } from 'antd'\n\nexport const SearchInput = ({input: searchTerm, onChange: setSearchTerm}) => {\n\n    return (\n        <>\n            <Input type=\"search\" placeholder=\"Buscar paÃ­s...\" onChange={(e) => setSearchTerm(e.target.value)} value={searchTerm} />\n        </>\n    )\n}","/* eslint-disable no-restricted-globals */\nimport { useEffect, useState } from \"react\";\n\nimport { useQuery} from \"@apollo/client\";\nimport { COUNTRIES } from \"../../services/GraphQL/Queries\";\n\nimport { useCountriesData } from \"../../Context/CountriesData\";\n\nimport { Col, Row } from \"antd\";\nimport { CardCountry } from \"../Components/Card\";\nimport { SearchInput } from \"../Components/Search\";\n\nexport default function Countries() {\n\nconst {countriesData, setCountriesData} = useCountriesData()\n\nconst [searchTerm, setSearchTerm] = useState('')\nconst [filteredCountriesData, setFilteredCountriesData] = useState([])\n\n\nconst { data } = useQuery(COUNTRIES)\n\nuseEffect(() => {    \n    const arrayData = [data?.Country]\n    setCountriesData(arrayData[0])    \n}, [data, setCountriesData])\n\n\nconst handleSearch = async (input) => {\n    const filter = countriesData?.filter(country => {\n     return country.name.toLowerCase().includes(input.toLowerCase())\n    })\n    setSearchTerm(input ? input : '');\n    setFilteredCountriesData(filter);\n}     \n\nreturn(\n    <>\n    <Row>\n        <Col span={12} style={{ margin: '1rem auto' }}>\n            <SearchInput input={searchTerm} onChange={handleSearch}/>   \n        </Col>\n    </Row> \n\n    <Row gutter={[16, 16]} style={{ margin: '1rem', padding: '1rem' } }>\n    { searchTerm ?\n\n        filteredCountriesData?.map((country) => {\n        return(\n            <Col key={country?._id}  xs={{span: 24}} sm={{span: 12}} lg={{span: 8}}>\n                <a href={`/${country?._id}`}>\n                <CardCountry name={country?.name} flag={country?.flag.emoji} capital={country?.capital} />\n                </a>\n            </Col>\n            )            \n        })\n\n        :\n\n        countriesData?.map((country) => {\n            return(\n                <Col key={country?._id} xs={{span: 24}} sm={{span: 12}} lg={{span: 8}}>\n                    <a href={`/${country?._id}`}>\n                    <CardCountry name={country?.name} flag={country?.flag.emoji} capital={country?.capital} />\n                    </a>\n                </Col>\n                )            \n            })\n    }\n    </Row>    \n    </>\n)\n\n}","import React, { createContext, useContext, useState } from \"react\";\n\nexport const CountryContext = createContext();\n\nexport default function CountryProvider({ children }) {\n  const [countryData, setCountryData] = useState([]);\n\n  return (\n    <CountryContext.Provider value={{ countryData, setCountryData }}>\n      {children}\n    </CountryContext.Provider>\n  );\n}\n\nexport function useCountryData() {\n  const context = useContext(CountryContext);\n  const { countryData, setCountryData } = context;\n  return { countryData, setCountryData };\n}\n","import {Card} from 'antd'\n\nexport const CardDetails = ({area, capital, domain, flag, name, population}) => {\n\n    return (\n        <Card style={{textAlign: 'center'}}>\n            <h2>{name}</h2>\n            <span role='img' aria-label={name} style={{fontSize: '8rem'}}>{flag}</span>\n            <p>Capital - {capital}</p>\n            <p>Area - {area}kmÂ²</p>\n            <p>Population - {population}M</p>\n            <p>Top Level Domain - {domain}</p>            \n        </Card>\n    )\n}","/* eslint-disable no-restricted-globals */\nimport { useEffect, useState } from \"react\";\n\nimport { useCountryData } from \"../../../Context/CountryData\";\n\nimport { useQuery} from \"@apollo/client\";\nimport { COUNTRY_DETAILS } from \"../../../services/GraphQL/Queries\";\n\nimport { Button, Col, Form, Input, InputNumber, Modal, Row } from \"antd\";\n\nimport { CardDetails } from \"../../Components/Card/Details\";\n\nexport default function CountryDetails() {\n\nconst {countryData, setCountryData} = useCountryData()\n\nconst [formData, setFormData] = useState()\nconst[visible, setVisible] = useState(false)\n\nconst param = window.location.pathname.split('/').slice(1);\n\nconst { data } = useQuery(COUNTRY_DETAILS,{ variables: {country_id : param.toString()} })\n\nuseEffect(() => {    \n  const arrayData = [data?.Country[0]]\n  setCountryData([[arrayData][0][0]])    \n}, [data, setCountryData])\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\n\nconst onFinish = (values) => {\n    const formInputData = {\n        name: values.name,\n        area: values.area,\n        population: values.population,\n        capital: values.capital,\n        domain: values.domain\n    }\n    setFormData(formInputData)  \n    setVisible(false) \n  };\n\nreturn(\n    <>\n    <Row>\n        <Col span={20} style={{margin: '1rem auto'}}>\n        <>\n          {!formData ? countryData?.map((country) => {\n            return(\n                \n            <CardDetails\n                key={country?._id} \n                area={country?.area}\n                capital={country?.capital}\n                flag={country?.flag?.emoji} \n                name={country?.name}\n                population={country?.population}\n                domain={country?.topLevelDomains.map((domain) => {\n                  return domain.name\n                })}\n            />\n            )})\n            : \n            countryData?.map((country) => {\n            return(\n            <CardDetails\n              key={country?._id}\n              flag={country?.flag?.emoji}\n              area={formData?.area}\n              capital={formData?.capital}\n              name={formData?.name}\n              population={formData?.population}\n              domain={formData?.domain}\n          /> \n            )})\n            }\n\n            <Row>\n             <Col style={{margin: '1rem auto'}}>\n              <Button type=\"primary\" onClick={() => setVisible(true)}>\n                Edit\n              </Button>\n              <Button style={{margin: 'auto 0.5rem'}} onClick={() => {window.location.href = '/'}}>Go Back</Button>\n             </Col>\n            </Row>\n            { visible ?\n            <Modal\n            title=\"Edit country information\"\n            centered\n            visible={visible}\n            onOk={() => setVisible(false)}\n            onCancel={() => setVisible(false)}\n            footer={''}\n          >\n               <Form {...layout} onFinish={onFinish}>\n                <Form.Item name={'name'} label=\"Name\" rules={[{ required: true }]}>\n                  <Input />\n                </Form.Item>\n                <Form.Item name={'capital'} label=\"Capital\" rules={[{ required: true }]}>\n                  <Input />\n                </Form.Item>\n                <Form.Item name={'population'} label=\"Population\" rules={[{ type: 'number', required: true}]}>\n                  <InputNumber addonAfter='Millions' />\n                </Form.Item>\n                <Form.Item name={'area'} label=\"Area\" rules={[{ type: 'number', required: true}]}>\n                  <InputNumber addonAfter='KMÂ²' />\n                </Form.Item>\n                <Form.Item name={'domain'} label=\"Top Level Domain\" rules={[{ required: true }]}>\n                  <Input />\n                </Form.Item>\n                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Submit\n                </Button>\n                <Button onClick={() => setVisible(false)} style={{marginLeft: '2%'}}>\n                  Cancel\n                </Button>\n                </Form.Item>\n              </Form>\n            </Modal>\n            : ''\n            }\n            </>\n        </Col>\n    </Row>\n    </>\n)\n\n}","import React from \"react\";\n\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nimport Countries from \"../views/Countries\";\nimport CountryDetails from \"../views/Countries/Details\";\n\nconst Routers = () => (\n  <BrowserRouter>\n    <Routes>\n      <Route path=\"/\" element={<Countries />} />\n      <Route path=\"/:id\" element={<CountryDetails />} />\n    </Routes>\n  </BrowserRouter>\n);\n\nexport default Routers;\n","import Routes from \"../src/router/routes\";\n\nimport CountriesProvider from \"./Context/CountriesData\";\nimport CountryProvider from \"./Context/CountryData\";\n\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"http://testefront.dev.softplan.com.br/\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <>\n      <CountriesProvider>\n        <CountryProvider>\n          <ApolloProvider client={client}>\n            <Routes />\n          </ApolloProvider>\n        </CountryProvider>\n      </CountriesProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"antd/dist/antd.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}